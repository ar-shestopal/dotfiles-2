*my-notes.txt* Ches's Personal Vim Quickref
*my-notes* *ches-notes*

                              ,---.                              ~
     ,--.   ,--.,--.          |   |                              ~
      \  `.'  / `--',--,--,--.|  .'      Ches Martin             ~
       \     /  ,--.|        ||  |       http://chesmart.in      ~
        \   /   |  ||  |  |  |`--'                               ~
         `-'    `--'`--`--`--'.--.                               ~
                              '--'                               ~

==============================================================================
CONTENTS                                                   *my-notes-contents*

    1. Intro.......................................|my-notes-intro|
    2. Setup.......................................|my-notes-setup|
        2.1 OS X Setup.............................|my-notes-os-x-setup|
    3. Vim Features................................|my-notes-vim-features|
        3.1 Diff Mode..............................|my-notes-diff-mode|
        3.2 Digraphs...............................|my-notes-digraphs|
        3.3 Folds..................................|my-notes-folds|
        3.4 Tags & Includes........................|my-notes-tags|
        3.5 Vim Plugin Dev.........................|my-notes-vim-plugin-dev|
    4. Filetypes...................................|my-notes-filetypes|
        4.1 General Conventions....................|my-notes-ft-conventions|
            4.1.1 Type Info........................|my-notes-ft-type-info|
            4.1.2 Build & Test.....................|my-notes-ft-build-test|
            4.1.3 Go To Definition.................|my-notes-ft-gotodef|
            4.1.4 Autocompletion...................|my-notes-ft-completion|
        4.2 Erlang.................................|my-notes-ft-erlang|
        4.2 Haskell................................|my-notes-ft-haskell|
        4.3 Help...................................|my-notes-ft-help|
        4.4 Go.....................................|my-notes-ft-golang|
        4.5 OCaml..................................|my-notes-ft-ocaml|
        4.6 PHP....................................|my-notes-ft-php|
        4.7 Python.................................|my-notes-ft-python|
        4.8 Ruby...................................|my-notes-ft-ruby|
        4.9 Scala..................................|my-notes-ft-scala|
    5. Other Vim Plugins...........................|my-notes-other-plugins|
    6. Credits.....................................|my-notes-credits|
        6.1 Do It Yourself.........................|my-notes-diy|
    7. License.....................................|my-notes-license|

==============================================================================
INTRO                                                         *my-notes-intro*

This is a quick reference for useful features of plugins I use and how they
are mapped in my config, plus an index of core Vim features that I often need
terse reminders of, with an organization scheme that suits me.

I encourage anyone to maintain such a doc for their own Vim setup, and create
mappings to make it fast to edit and browse. See |my-notes-diy| for some tips.

==============================================================================
SETUP                                                         *my-notes-setup*

Clone dotfiles and start Vim, |:NeoBundleCheck| takes care of pretty much
everything from there.

My rc usually degrades gracefully if something isn't available, but for real
daily work the following system-level tools should be installed for the best
experience:

  - `ag` (the_silver_searcher) preferably, or `ack,` more portably.
  - Exuberant ctags
  - tmux
  - Vim built with Python and Ruby support.
    Build YouCompleteMe manually, until NeoBundle can deal with its Git
    submodules correctly (`cd ~/.vim/bundle/YouCompleteMe && ./install.sh`).

TODO: try to drop Ruby requirement, for neovim? LustyJuggler.~

OS X Setup                                               *my-notes-os-x-setup*
----------
>
    $ brew install macvim --override-system-vim --with-lua --with-luajit
    $ brew install the_silver_searcher ctags tmux
<
Note: Lua is for neocomplete which isn't currently configured, though I've
been giving it a try (see `~/.vim/include/neocompl.vim` for WIP).

==============================================================================
VIM FEATURES                                           *my-notes-vim-features*

Summaries of core Vim features that I sometimes need to jog my memory about.

                                                          *my-notes-diff-mode*
Diff Mode~

Full details at |diff|. The bare essentials: >

    ]c   move to next change
    [c   move to previous change
    do   "diff obtain": select hunk from other buffer, updating current one
    dp   "diff put": select hunk from current buffer, updating other one

    :diffget      Ex mode equivalents of `do` and `dp`, you'll want to use
    :diffput      these with visual selections of only part of a hunk.
    :diffupdate   Re-sync highlighting after moving some hunks.
    :diffoff      Switch off diff mode for current window, resetting buffer
                  opts. With bang, turn off diff for the entire tab page.

In a three-way merge, we must specify "other" with a bufspec argument to the
|:diffget| or |:diffput| commands (a buffer number or substring name match).
This can be eased by turning off 'modifiable' for all but the "result" buffer,
then |dp| will target that buffer automatically.

`:cq` quits Vim with an error code, causing SCMs to fail a merge when you want
to bail on it. Also useful for the bash `fc` command editor, where `:q!` with
unwanted changes will still execute.

From within Vim, as opposed to starting as `vimdiff` or `vim -d`, start a
(vertical split) diff with `:vert diffsplit <other file>`.

------------------------------------------------------------------------------
Digraphs                                                   *my-notes-digraphs*

The |digraph| system allows inserting many special and Unicode characters.
<C-k> in insert mode is the main chord to remember, to trigger digraph entry.
Entering two characters following this inserts the associated character. These
often have good mnemonics, for instance here are some common digraphs with
their codes: >

    © - Co
    ® - Rg
    ¢ - Ct
    £ - Pd
    → - ->
    ⇒ - =>
    ö - o:
    é - e'

Em dash and en dash are `-M` and `-N`, respectively.

Sometimes Vim may not be able to display a character correctly in the chosen
font. The `ga` normal mode command will echo info to clarify the character
under cursor. The `vim-characterize` plugin (installed) enhances this.

Some special characters short-circuit digraph entry, such as <C-k><Tab>
inserting a literal tab character (useful when writing UltiSnips snippets!).

------------------------------------------------------------------------------
Folds                                                         *my-notes-folds*

See |fold-commands|, this is a quick summary: >

    zf#j        creates a fold from cursor down # lines.
                Visual selection works too, naturally.
    zf/string   creates a fold from cursor to string.
    zd          deletes the fold at cursor.
    zD          deletes nested folds recursively.
    zo          opens a fold at cursor.
    zO          opens all nested folds at cursor.
    zc          closes a fold at cursor.
    zC          closes all nested folds at cursor.
    zm          fold more (increases foldlevel by one).
    zM          closes all folds (sets foldlevel to zero).
    zr          reduce folding (decreases foldlevel by one).
    zR          opens all folds (sets foldlevel to max).
    zx          resets folds (reapplies configured foldlevel).

    zj          moves cursor to the next fold.
    zk          moves cursor to the previous fold.
    [z          moves to start of open fold.
    ]z          moves to end of open fold.

When 'foldmethod' is "marker", creation/deletion commands insert/remove
comments (using 'commentstring' and 'foldmarker'). These are ugly noise for
most languages but great for VimL where you can be pretty certain that anyone
bothering to read and edit it is a Vim user.

------------------------------------------------------------------------------
Tags and Includes                         *my-notes-tags*  *my-notes-includes*

Commit |window-tag| stuff to memory.

|[_CTRL-I| jumps to first line that contains keyword under cursor, useful to
get to a variable definition or import. |[i| just echoes the line instead.
These are aware of the 'include' setting for searching in includes. |[I| lists
all occurrences. Also there is |gd|, the "go to declaration" normal mode
command. See |include-search|.

|CTRL-W_z| is a synonym for |:pclose|, closing any preview window for the
current tab page. This is useful e.g. for previewing a function def from
Tagbar with the "P" mapping, or for a tag under cursor using |CTRL-W_}|. Move
to the preview window with |CTRL-W_P|. See |preview-window|.

------------------------------------------------------------------------------
Vim Plugin Development                               *my-notes-vim-plugin-dev*

Step One~

http://learnvimscriptthehardway.stevelosh.com/

- A "standard library" of VimL. Impressive, or insane?
  https://github.com/vim-jp/vital.vim
- From Google!
  https://github.com/google/vim-maktaba

Useful core doc sections~

    - |vimfiles| - Runtime path layout
    - |write-plugin|
    - |write-filetype-plugin|
    - |write-local-help|
    - |autocommand-events|

Best Practices~

<Plug> mappings: http://whileimautomaton.net/2008/09/27022735

Google has a Vimscript style guide!
   http://google-styleguide.googlecode.com/svn/trunk/vimscriptguide.xml

API documentation generation: https://github.com/google/vimdoc

Debugging~

Standard invocation for bare-vim testing, vim mode but no rc file: >

    $ vim -u NONE -N

Syntax Definitions~

Useful debugging of current word's group matching: >

    nnoremap <F9> call HilightInfo()<CR>

    function HilightInfo()
      echo "hi<" . synIDattr(synID(line("."), col("."), 1), "name") .
        \ '> trans<' . synIDattr(synID(line("."), col("."), 0), "name") .
        \ "> lo<" . synIDattr(synIDtrans(synID(line("."), col("."), 1)), "name") . ">"<CR>
    endfunction

See also |scriptease-zS| from tpope's |scriptease|.

==============================================================================
FILETYPES                                                 *my-notes-filetypes*

These are filetypes that my configuration has gone to some particular care to
support well, beyond rudimentary syntax support, etc.

No, I am not an expert in all of these languages, but I did take a sabbatical
recently where I went on a survey learning spree.

    4.1 General Conventions....................|my-notes-ft-conventions|
    4.2 Erlang.................................|my-notes-ft-erlang|
    4.2 Haskell................................|my-notes-ft-haskell|
    4.3 Help...................................|my-notes-ft-help|
    4.4 Go.....................................|my-notes-ft-golang|
    4.5 OCaml..................................|my-notes-ft-ocaml|
    4.6 PHP....................................|my-notes-ft-php|
    4.7 Python.................................|my-notes-ft-python|
    4.8 Ruby...................................|my-notes-ft-ruby|
    4.9 Scala..................................|my-notes-ft-scala|

TODO:~

- JavaScript? Needs updating/cleanup.
- Shell?
- I'm not much of a markup guy, but Emmet is there, ragtag, etc.

------------------------------------------------------------------------------
General Conventions                                  *my-notes-ft-conventions*

Filetype-specific stuff is generally what <LocalLeader> is designed for. I
try to honor this fact with my filetype mappings, and apply some conventions
across them.

TODO: <LocalLeader>b for build, or just set Dispatch?
TODO: make <LocalLeader>gt a convention for ctags generation?
TODO: debugger conventions, e.g. set breakpoint, step, etc. Look at Eclim's
      Java debugging, vim-lldb, vebugger, etc.

                                                       *my-notes-ft-type-info*
Type Information (when supported)~

<LocalLeader>t          Display type information about an identifier or
                        expression under the cursor.

<LocalLeader>i          Display extended type information about an identifier
                        or expression under the cursor, such as derivations,
                        interfaces implemented, etc.

<LocalLeader>r          Rename identifier under cursor, where semantic
                        awareness is supported.

                                                      *my-notes-ft-build-test*
Running Tests and Builds~

TODO: Dispatch, etc.

                                                         *my-notes-ft-gotodef*
Navigating to Definitions~

Favor Vim's built-in ctags support whenever possible, but if a filetype
plugin offers go-to-definition support, it usually has enhanced semantic
awareness.

In these cases, I map <LocalLeader> + Vim's standard ctags jump mappings that
are appropriate for what the plugin's function supports (split, preview
window, etc.). The |gd| command is also commonly overridden.

See |tag-commands|, |window-tag|.

                                                      *my-notes-ft-completion*
Completion~

|youcompleteme| hooks into 'omnifunc' when one is defined, so <C-Space>
generally works everywhere that semantic completion is available.

Sometimes completions are suggested automatically, in others <C-Space> may
need to be invoked explicitly. This is either due do a setting needed for
|g:ycm_semantic_triggers| or the ftplugin's 'omnifunc' not behaving exactly
as YouCompleteMe expects.

------------------------------------------------------------------------------
Erlang                                                    *my-notes-ft-erlang*

TODO: |vimerl|

------------------------------------------------------------------------------
Haskell                                                  *my-notes-ft-haskell*

See: `~/.vim/after/ftplugin/haskell.vim`

Installing the Tools~

The ghc-mod package enables all the type awareness magic in |ghcmod| to work.
The codex package generates ctags (with hasktags) for all the dependencies in
your Cabal project sandboxes.
>
    $ cabal install --user ghc-mod codex hasktags pointfree
<
|syntastic| has built-in checker support for HLint, which is quite useful,
especially as a learner. HLint is installed as a dependency of ghc-mod.

TODO: mappings for |:GhcModCheck|, |:GhcModLint| because their quickfix output
is much more readable with the detailed output of GHC and HLint. Or can
Syntastic be configured to use these instead of its default checkers?

TODO: look into codex-like support for Stack instead of cabal sandboxes.

                                                   *my-notes-haskell-mappings*
Mappings~

<LocalLeader>t          Display type information for word under cursor.
                        See |:GhcModType|.

<LocalLeader>T          Insert type of the expression under the cursor on the
                        line above. This is to automatically enter function
                        headers. See |:GhcModTypeInsert|.

<LocalLeader>i          Show extended type information for word under cursor,
                        like type class instances. See |:GhcModInfo|.

<LocalLeader>I          Same as above, using |preview-window|.
                        See |:GhcModInfoPreview|.

<LocalLeader>c          Clear highlighting left by the above type information
                        commands. See |:GhcModTypeClear|.

<LocalLeader>es         Show expansions of slices in |quickfix|. These are
                        Template Haskell metaprogramming macros.
                        See |:GhcModExpand|.

<LocalLeader>gt         Generate project ctags using `codex`, which runs
                        `haskell-tags` on all dependencies in a Cabal project.
                        Runs in the background with |dispatch-:Start|.

gf                      Has awareness of Haskell modules and imports for
                        navigating to them, courtesy of |vim2hs|.

                                                   *my-notes-haskell-commands*
Commands~

Both |ghcmod| and |vim2hs| provide some additional utility commands, like
|:LPaste| for submitting to the lpaste.net pastebin preferred by the
`#haskell` IRC channel.

vim2hs also includes several |tabular| presets for alignments
(|vim2hs-tabular|) -- try autocompleting the `:Tabular` command with
`haskell_`.

                                                    *my-notes-haskell-options*
Options~

'formatprg'
        Set to the `pointfree` program which will try to reformat to
        point-free style. Sometimes this becomes excessively cryptic. Worth
        looking at `stylish-haskell` for other reformatting ideas.

        Note also that |vim2hs| includes |:PointFree| commands to suggest or
        replace selections.

'omnifunc'
        Set to use ghc-mod backed semantic completion through the `neco-ghc`
        plugin.

Alternatives and More~

Too many Haskell plugins for Vim do too much, unfortunately -- often they have
some good ideas that I want, but I don't want everything. I chose |vim2hs| to
get started, but eventually I may want to steal ideas from others.

A perfect example is haskell-vim-now, which incorporates a lot of good ideas,
but is far too invasive (it aims to take someone with no existing Vim setup to
productive Haskell use): https://github.com/begriffs/haskell-vim-now. Check
how it uses hscope for showing uses of a symbol.

haskellmode-vim is a comprehensive but rather outdated plugin with many
features, some probably worth stealing and updating:
https://github.com/lukerandall/haskellmode-vim

haskell-vim has alternative syntax and indentation definitions that I might
prefer, I'm not crazy about vim2hs's indentation:
https://github.com/neovimhaskell/haskell-vim

I'd like to have a Haskell tool like `goimports` to aid with automatically
adding imports to files. vim-hsimport almost gets there, but is a little more
manual so far: https://github.com/dan-t/vim-hsimport. Also, it relies on
hdevtools (see https://github.com/bitc/vim-hdevtools) which is less active
than ghc-mod. (Maybe not? https://github.com/hdevtools/hdevtools)

Nice and simple plugin for Hoogle lookup, I tend to do it in ghci but might be
convenient in Vim too: https://github.com/Twinside/vim-hoogle

Keep an eye on https://github.com/haskell/haskell-ide-engine

------------------------------------------------------------------------------
Help                                                        *my-notes-ft-help*

See: `~/.vim/after/ftplugin/help.vim`

That's right, I've done a few cool things for Vim help files.

Mappings~

<Enter> is mapped to |CTRL-W_]| for following tags, and <BS> to the |CTRL-T|
"go back" mapping. Like |vimwiki| navigation, and less chords = less RSI.
Others: >

    ]o, [o : Go forward/back to next Vim option tag in the text.
    ]s, [s : Go forward/back to next subject tag in the text.

    <Tab>, <S-Tab> : Same as ]s, [s

Snippets~

There are some custom UltiSnips snippets for how I like to format help
sections, etc. Try `sec`, `ssec`, `sssec` triggers.

------------------------------------------------------------------------------
Go, a.k.a golang                                          *my-notes-ft-golang*

See: `~/.vim/after/ftplugin/go.vim`

I haven't written much Go yet, but fortunately Fatih Arslan's |vim-go| is a
very well-built and comprehensive plugin with good help, so it's really the
only thing to look at.

FWIW I'm not too fond of the language, but it's a necessity for some systems
I need to work on. I have to admit it has good tooling.

Installing the Tools~

A bunch of standard Go tools need to be installed in order for vim-go's
features to work. Fortunately the plugin can help: just run
|:GoInstallBinaries|. This will install to `$GOPATH/bin` or `$GOBIN` unless an
explicit *'g:go_bin_path'* is set.

Go has a "workspace" convention for development which basically allows for
directories to serve as package sandboxes for projects. That's pretty much
what `$GOPATH` amounts to. The `direnv` tool has built-in support to help
manage many independent Go projects this way, but you'll want one default
workspace for just playing around. Here's the short on how I set that up: >

    $ mkdir -p ~/src/go/{bin,pkg,src/github.com/ches}

And add the following to `~/.bashrc`: >

    export GOPATH=$HOME/src/go
    export GOROOT=$(go env GOROOT)
    export PATH=$PATH:$GOPATH/bin:$GOROOT/bin

For full info see: http://golang.org/doc/code.html

                                                    *my-notes-golang-mappings*
Mappings~

<LocalLeader>t          Display type information for word under cursor.
                        See |(go-info)|.

<LocalLeader>i          Show detailed properties for type/declaration/value
                        under the cursor. See |(go-describe)|.

<LocalLeader>I          Show interfaces that type under the cursor
                        implements. See |(go-implements)|.

<LocalLeader>r          Rename identifier under cursor. See |(go-rename)|.

<LocalLeader>f          Loads CtrlP with definitions in current file. See
                        |:GoDecls|.

<LocalLeader><C-f>      Loads CtrlP with definitions under the current
                        directory. See |:GoDeclsDir|.

Enhanced semantic go-to-definition is available and uses the standard mappings
in |my-notes-ft-conventions|. A few additional ones that don't have native
equivalents in Vim:

<LocalLeader><C-v>]     Go to definition in vertical split.
                        See |(go-def-vertical)|.

<LocalLeader><C-t>]     Go to definition in new tab. See |(go-def-tab)|.

TODO~

- Simple plugin to compile/run the buffer on the Go Playground and echo the
  output: https://github.com/mattn/goplayground-vim
- Add notes about `gb` projects: lvimrc, projectionist

------------------------------------------------------------------------------
OCaml                                                      *my-notes-ft-ocaml*

See: `~/.vim/after/ftplugin/ocaml.vim`

Installing the Tools~

The `opam` tool is the de facto standard package and compiler version manager
for OCaml.

The merlin OPAM package enables all the type awareness magic in |merlin| to
work, and it actually includes the Vim plugin which we load from its
installed path when available. For OS X:
>
    $ brew install objective-caml opam
    $ opam install merlin

See https://github.com/the-lambda-church/merlin/wiki/vim-from-scratch

                                                     *my-notes-ocaml-mappings*
Mappings~

<LocalLeader>t          Display type information for word under cursor.
                        See |:TypeOf|.

<LocalLeader>r          Rename identifier under cursor. See |:Rename|.

Enhanced semantic go-to-definition is available and uses the standard mappings
in |my-notes-ft-conventions|. Additionally, there is semantic support of
finding occurrences of identifiers (|:Occurrences|); the following mappings
take after Vim's:

<LocalLeader>*          Find next and previous occurrence of <cword>.
<LocalLeader>#

------------------------------------------------------------------------------
PHP                                                          *my-notes-ft-php*

See: `~/.vim/after/ftplugin/php.vim`

I recently had to write some PHP for the first time in a decade. The language
has actually gotten a lot better :-)

Installing the Tools~

The `composer` tool is the modern community standard package manager for PHP,
and the autoloading standards that it embraces lend support for tooling like
autocompleters. I'm trying the Padawan client/server completer after finding
`phpcomplete_extended` to be unstable memory bloat, and unmaintained.

On OS X:
>
    $ brew tap homebrew/php
    $ brew install php56 composer
    $ composer global require mkusher/padawan

This integrates with |youcompleteme| through its *'omnifunc'* support.
Unfortunately unlike `phpcomplete_extended` it doesn't have go-to-definition
support yet, but hopefully that's coming. Ctags can still do wonders.

Initialize an index once per project, then it will be kept up to date:
>
    :PadawanGenerateIndex
    :PadawanStartServer

See https://github.com/mkusher/padawan.php.

TODO: Padawan needs vimdoc, let's give it that.
TODO: I dunno, this may actually be worse on resource usage than the old
      plugin -- bloated PHP process and huge Python one for YCM... But it's a
      young project, keep watch.

Snippets~

I have written some UltiSnips snippets for the Peridot BDD testing library
DSL. To use them:
>
    :set filetype=peridot.php

------------------------------------------------------------------------------
Python                                                    *my-notes-ft-python*

See: `~/.vim/after/ftplugin/python.vim`

Installing the Tools~

TODO: rebuild brew macvim `--with-python3`, check YouCompleteMe status

No system-level dependency installations are required, as long as
|youcompleteme| has been installed according to |my-notes-setup| since it
includes a copy of the Jedi library used by |jedi-vim|. This enables semantic
completion and other static analysis-based features such as go-to-definition,
finding usages, renaming, and documentation lookup.

This may not work in Python 3 environments, try installing Jedi with pip.

|syntastic| has built-in support for all popular linters, pep8, etc. Be sure
the desired pip packages are installed for the Python version & virtualenv in
question and then the error and style checking should Just Work.

|vim-pyenv| supports switching Python versions and virtualenvs. It can switch
Jedi between Python 2 and 3 modes within a running session, but I haven't
configured this yet.

TODO: make airline report pyenv~
                                                    *my-notes-python-mappings*
Mappings~

<LocalLeader>r          Rename identifier under cursor.
                        See |g:jedi#rename_command|.

<LocalLeader>u          Show all usages of the object referred to by the
                        identifier under the cursor in the quickfix list.
                        See |g:jedi#usages_command|.

gd                      Approximately equivalent to Vim's standard |gd|, but
                        with greater semantic awareness.
                        See |g:jedi#goto_assignments_command|.

K                       Shows Pydoc for the item under the cursor.
                        See |g:jedi#documentation_command|.

Enhanced semantic go-to-definition is available and uses the standard mappings
in |my-notes-ft-conventions|.

                                                      *my-notes-python-extras*
Extras~

|chapa| provides handy movement, selection, commenting, and folding in Python.
As a brief reminder of the mapping conventions: >

    fnf, fpf : Find next/previous function.
    fnm, fpm : Same, for methods.
    fnc, fpc : Same, for classes.
    vim      : Visually select this method. n and p work also.
    cim      : Toggle commenting of this method. n and p work also.
    zim      : Fold this method. n and p work also.

TODO: define custom chapa repeat mappings

                                                     *my-notes-python-ipython*
IPython~

TODO: Customize mappings
TODO: It's pretty janky and crusty, explore alternatives or enhancements

The vim-ipython plugin has no proper vimdoc, so here's the skinny:

    1. Start `ipython kernel` or `ipython console` in a shell.
       There is an :IPythonNew command but it seems busted.

    2. Run :IPython to connect to the kernel.

    3. Hit <C-s> on a line or visual range to execute it. <M-s> if the code
       has leading whitespace.

<F5>                    Execute entire file with IPython's `%run` magic.

<LocalLeader>d          Shows documentation like the IPython `object?`
                        feature.
                        FIXME: clash with jedi-vim mapping

<LocalLeader>s          Show the "subchannel" monitor window, if you've closed
                        it. You might turn off monitoring if you're executing
                        plot rendering, etc. outside of Vim?

Alternatives and More~

https://github.com/klen/python-mode
https://github.com/python-rope/ropevim

python-mode is a fairly good all-in-one, but has some unneeded functionality
better served by other plugins like Syntastic, and it uses Rope (see below).

Rope has more refactoring capabilities than Jedi but it's annoying that it has
to generate project metadata. Still, it's potentially worth using just for
advanced refactoring uses.

vim-virtualenv works well for virtualenvwrapper, but with pyenv vim-pyenv is
the clear choice.

Possibly more powerful/integrated with true text objects than Chapa:

https://github.com/bps/vim-textobj-python
https://github.com/michaeljsmith/vim-indent-object

Worth a look for debugger integration:

https://github.com/joonty/vdebug
https://github.com/idanarye/vim-vebugger
http://pyclewn.sourceforge.net/
https://github.com/gotcha/vimpdb

------------------------------------------------------------------------------
Ruby (and Rails)                                            *my-notes-ft-ruby*

TODO: |vim-ruby| |rails|

------------------------------------------------------------------------------
Rust                                                        *my-notes-ft-rust*

See: `~/.vim/after/ftplugin/rust.vim`

The officially-maintained |rust| plugin provides basic filetype support like
syntax and indentation definitions, compiler plugins for `rustc` and `cargo`,
etc. It also provides some Vim commands summarized below.

Installing the Tools~

The `racer` tool enables autocompletion and semantic go-to-definition support.
>
    $ brew install rust
    $ cargo install racer
    $ cargo install rustfmt

|syntastic| support for syntax checking with `rustc` is also included in the
|rust| plugin.

                                                      *my-notes-rust-mappings*
Mappings~

gd                      Approximately equivalent to Vim's standard |gd|, but
                        with greater semantic awareness.

gD                      Same as |gd| but opens in a vertical split.

Enhanced semantic go-to-definition is available and uses the standard mappings
in |my-notes-ft-conventions|.

TODO: racer-vim lacks vimdoc.

                                                      *my-notes-rust-commands*
Commands~

The |rust| plugin provides several documented utility commands for building
and running, formatting, expanding macros, outputting LLVM IR or assembly,
etc. Some of the most interesting are |:RustRun|, |:RustFmt|, and |:RustPlay|
for pasting to the Rust playpen.

TODO: Consider https://github.com/Chiel92/vim-autoformat for auto-rustfmt.

------------------------------------------------------------------------------
Scala                                                      *my-notes-ft-scala*

See: `~/.vim/after/ftplugin/scala.vim`

The |scala| plugin provides basic filetype support plus a few utilities like
import sorting. IDE-like features for Scala are by virtue of |ensime-vim| and
the ENSIME server that it talks to.

Installing the Tools~

Generally all that is needed is a JDK and one of the build tools supported by
ENSIME plugins: https://ensime.github.io/build_tools/. Then the build tool
will be able to install the ENSIME server and `ensime-vim` can then start it
automatically. For OS X: >

    $ brew cask install java
    $ brew install sbt

If the project builds with `sbt`, for example, install the ENSIME plugin by
adding the following to `~/.sbt/0.13/plugins/plugins.sbt`: >

    addSbtPlugin("org.ensime" % "ensime-sbt" % "0.4.0")

Then run "sbt gen-ensime" for the project.

                                                     *my-notes-scala-mappings*
Mappings~

gd                      Approximately equivalent to Vim's standard |gd|, but
                        with greater semantic awareness.

<LocalLeader>e          Generates project classpath and starts ENSIME server.
                        See |:EnClasspath|.

<LocalLeader>t          Display type information for word under cursor.
                        See |:EnType|.

<LocalLeader>i          Show interfaces that type under the cursor
                        implements. See |:EnInspectType|.

<LocalLeader>I          Presents selection list of possible needed imports.
                        Selecting one inserts it. See |:EnSuggestImport|.

<LocalLeader>r          Rename identifier under cursor. See |:EnRename|.

Enhanced semantic go-to-definition is available and uses the standard mappings
in |my-notes-ft-conventions|.

TODO: Eclim?

==============================================================================
OTHER PLUGINS                                         *my-notes-other-plugins*

Notes and tips on global plugins or some that apply to many filetypes.

TODO: yankring
TODO: signature, `m/` mapping is handy
TODO: TagmaTasks, needs more memorable mapping prefix, or alternative plugin?
TODO: Custom commands: GstageFile, Gstage for fugitive

------------------------------------------------------------------------------
Goyo Distraction-free Writing                                  *my-notes-goyo*

Goyo is a distraction-free writing plugin that can be quickly toggled to make
Vim appear similar to the WriteRoom application: minimal interface elements,
just the text, generously padded and centered. It is robust about restoring
layout when being toggled off, resizing if windows resize, etc.

Goyo lacks vimdoc.

Mappings~

<Leader>V               Toggles distraction-free mode.
                        Default mapping of the similar VimRoom plugin, so I
                        kept it.

I have configured Goyo with hooks to also hide tmux status bar chrome, if
running in a tmux session.

------------------------------------------------------------------------------
greplace                                                   *my-notes-greplace*

"Global" search and replace. See |greplace|. Lacks help tags for the commands.

Search across multiple files, collecting results into a buffer which you can
edit interactively and persist the changes back to the files.

Invoke with `:Gsearch` and apply changes when ready with `:Greplace`. Add bang
to forego confirmations. Doesn't save buffers, use |:wall|. >

    :Gsearch [<grep-option(s)>] [[<pattern>] [<filename(s)>]]
    :Gbuffersearch [<grep-option(s)>] <pattern>
    :Gargsearch [grep opts] mypattern

The latter two use the buffer list and |arglist|, predictably. `:Gqfopen`
loads an existing |quickfix| list into the replace buffer.

If pattern isn't given to `:Gsearch` it will be interactively prompted for --
use this for patterns containing spaces. Completion is available for
selecting file/directory names, in either form.

Uses 'grepprg' and can set `g:grep_cmd_opts` to customize for specific tools
like `ag` and `ack`.

------------------------------------------------------------------------------
tslime Tmux Integration                                 *my-notes-tmux-tslime*

tslime is named in reference to Emacs SLIME mode for Lisp development, but it
is really only focused at sending code to a REPL running in a configurable
tmux pane. This is still pretty handy though, since it is useful for many
languages.

tslime annoyingly lacks vimdoc. The self-explanatory default mappings are: >

    vmap <C-c><C-c> <Plug>SendSelectionToTmux
    nmap <C-c><C-c> <Plug>NormalModeSendToTmux
    nmap <C-c>r <Plug>SetTmuxVars

It also has a `:Tmux` command to send arbitrary lines to the configured pane.

tslime can also be helpful for executing test runners in a separate pane. See
|turbux| which was initially focused on Ruby test runners, but has generalized
support for custom runners now. It is probably best used with |dispatch|
instead though, especially if an 'errorformat' is available for parsing the
runner's failure/error output.

TODO: maybe try sjl's tslime fork that has vimdoc~

------------------------------------------------------------------------------
Vimwiki                                                     *my-notes-vimwiki*

TODO |vimwiki|

Global:

<Leader>ww              Open wiki index
<Leader>wt              Open wiki index in new tab
<Leader>ws              UI selection of multiple wikis in configured list
<Leader>wi              Open diary index
<Leader>w<Leader>w      Open diary wiki page for today
<Leader>w<Leader>t      Open diary wiki page for today in new tab

Vimwiki Buffer-local:

<C-Space>               Toggles to-do list item checkboxes.
                        See |vimwiki-list-manipulation| for a bunch more.

Custom additions:

<Leader>wg              |:VimwikiGoto|, jump to page name with autocompletion.
<Leader>w/              |:VimwikiSearch|

==============================================================================
CREDITS                                                     *my-notes-credits*

Starting this doc was primarily inspired by Dr. Mike Henry's excellent
example:

    https://github.com/drmikehenry/vimfiles/blob/master/doc/notes.txt

Thanks of course to Bram for Vim and plugin authors for making it so fun and
productive to use, especially the prolific Tim Pope, Shougo Matsushita, and
others.

Do It Yourself                                                  *my-notes-diy*
--------------

It's easy to end up with a pile of Vim plugins and forget how things work, or
lose track of how to keep consistency between the filetypes you work with.

I encourage anyone to maintain a doc like this for their own Vim setup, and
create mappings to make it fast to edit and browse. It's easy, Vim's help
format is low-ceremony and not strict.

I used to dump things like this in a personal knowledgebase somewhere, like
Vimwiki, when it occurred to me that making it available in Vim's own help
system is the most natural place.

Feel free to use this file as a starting template, and see |write-local-help|
and UltiSnips's snippets for help files. Here are some example mappings you
might like: >

    " Edit your notes.
    nnoremap <Leader>en :split  ~/.vim/doc/my-notes.txt<CR>
    nnoremap <Leader>eN :vsplit ~/.vim/doc/my-notes.txt<CR>

    " Browse your notes. Leaves you ready for Tab completion.
    nnoremap <Leader>hh :help my-notes-

    " Easy helptags regeneration and internal tag navigation while editing.
    autocmd BufRead ~/.vim/doc/my-notes.txt
          \ setlocal modifiable iskeyword=!-~,^*,^\|,^\",192-255 |
          \ map <buffer> <Leader><space> :w!<CR>:helptags ~/.vim/doc<CR>

    " Make help navigation easier on your hands, Vimwiki-style.
    autocmd FileType help
          \ nnoremap <buffer> <CR> <C-]> |
          \ nnoremap <buffer> <BS> <C-t>

==============================================================================
LICENSE                                                     *my-notes-license*

The original contents of this document may be used under the terms of the
Creative Commons Attribution Non-Commercial Share-Alike license.

http://creativecommons.org/licenses/by-nc-sa/4.0/

------------------------------------------------------------------------------
 vim:tw=78:ts=8:ft=help:norl:
