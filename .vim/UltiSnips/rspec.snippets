snippet anr "and_raise" w
and_raise${1:(${2:exception})}
endsnippet

snippet andra "and_return" w
and_return${1:(${2:value})}
endsnippet

snippet anrb "and_return block" w
and_return { $1 }
endsnippet

snippet ant "and_throw" w
and_throw${1:(${2:sym})}
endsnippet

snippet any "and_yield" w
and_yield${1:(${2:values})}
endsnippet

snippet annot "any_number_of_times" w
any_number_of_times
endsnippet

snippet atl "at_least" w
at_least(${1:n}).times
endsnippet

snippet atm "at_most" w
at_most(${1:n}).times
endsnippet

snippet cnf "configure"
RSpec.configure do |config|
  config.$0
end
endsnippet

snippet con "context"
context '${1:context}' do
  $0
end
endsnippet

snippet desc "controller_context"
require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe ${1:controller} do
  $0
end
endsnippet

snippet desrc "controller_context_RESTful"
describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4: with some parameters}" do
  $0
end
endsnippet

snippet des "Describe"
describe '${1:subject}' do
  $0
end
endsnippet

snippet dest "Describe Type"
describe ${1:Type} do
  $0
end
endsnippet

snippet dests "Describe Type string"
describe ${1:Type}, "${2:description}" do
  $0
end
endsnippet

snippet ex "exactly" w
exactly(${1:n}).times
endsnippet

snippet its "it should"
it 'should ${1:do something}'${2: do
	$3
end}
endsnippet

snippet it "It"
it '${1:does something}'${2: do
	$3
end}
endsnippet

snippet matc "Matcher (Custom)"
class ${1:ReverseTo}
  def initialize($3)
    @$3 = $3
  end

  def matches?(actual)
    @actual = actual
    # Satisfy expectation here. Return false or raise an error if it's not met.
    ${0:@actual.reverse.should == @$3}
    true
  end

  def failure_message_for_should
    "expected #{@actual.inspect} to $2 #{@$3.inspect}, but it didn't"
  end

  def failure_message_for_should_not
    "expected #{@actual.inspect} not to $2 #{@$3.inspect}, but it did"
  end
end

def ${2:reverse_to}(${3:expected})
  $1.new($3)
end
endsnippet

snippet mat "Matcher (DSL)"
RSpec::Matchers.define :${1:name} do |${2:expected}|
  match do |${3:actual}|
    $3.$1?($2)
  end
end

endsnippet

snippet moc "mock" b
${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
endsnippet

snippet mm "mock_model"
mock_model${1:(${2:model})}
endsnippet

snippet mocw "mock_with" b
RSpec.configure do |config|
	config.mock_with :${0:mocha|flexmock|rr}
end
endsnippet

snippet on "once" w
once
endsnippet

snippet reqs "Require spec_helper" b
require 'spec_helper'


endsnippet

snippet shbs "response.should be_success"
response.should be_success
endsnippet

snippet shnbs "response.should_not be_success"
response.should_not be_success
endsnippet

snippet conn "Set Controller for Spec"
controller_name :${1:controller}
endsnippet

snippet bef "before block" b
before(${1::each}) do
  $0
end
endsnippet

snippet sh= "should ==" w
should == ${1:value}
endsnippet

snippet sh= "should ==" !b
${1:subject}.should == ${2:value}
endsnippet

snippet shm "should =~" w
should =~ /${1:regexp}/
endsnippet

snippet shm "should =~" !b
${1:subject}.should =~ /${2:regexp}/
endsnippet

snippet she "should eql" w
should eql(${1:value})
endsnippet

snippet she "should eql" !b
${1:subject}.should eql${2:(${3:value})}
endsnippet

snippet shb "should be" w
should be${1:(${2:result})}
endsnippet

snippet shb "should be" !b
${1:subject}.should be${2:(${3:result})}
endsnippet

snippet shbko "should be_a_kind_of" !b
${1:subject}.should be_a_kind_of${2:(${3:klass})}
endsnippet

snippet shbio "should be_instance_of" !b
${1:subject}.should be_instance_of${2:(${3:klass})}
endsnippet

snippet shbc "should be_close" !b
${1:subject}.should be_close(${2:result}, ${3:tolerance})
endsnippet

snippet shin "should include" !b
${1:subject}.should include(${2:object}${3:, ${4:object2}})
endsnippet

snippet shbr "should be_redirect"
response.should be_redirect
endsnippet

snippet she "should equal" !b
${1:subject}.should equal${2:(${3:value})}
endsnippet

snippet shh "should have" !b
${1:subject}.should have(${2:num}).${3:things}
endsnippet

snippet shhal "should have_at_least" !b
${1:subject}.should have_at_least(${2:num}).${3:things}
endsnippet

snippet shham "should have_at_most" !b
${1:subject}.should have_at_most(${2:num}).${3:things}
endsnippet

snippet shhr "should have_records" !b
${1:subject}.should have(${2:x}).records
endsnippet

snippet shm "should_match" !b
${1:subject}.should match(/${2:regexp}/)
endsnippet

snippet shn= "should_not ==" !b
${1:subject}.should_not == ${2:value}
endsnippet

snippet shnm "should_not =~" !b
${1:subject}.should_not =~ /${2:regexp}/
endsnippet

snippet shne "should_not eql" !b
${1:subject}.should_not eql${2:(${3:value})}
endsnippet

snippet shnb "should_not be(predicate)" !b
${1:subject}.should_not be${2:(${3:predicate})}
endsnippet

snippet shkof "should_not be_a_kind_of" !b
${1:subject}.should_not be_a_kind_of${2:(${3:klass})}
endsnippet

snippet shbio "should_not be_instance_of" !b
${1:subject}.should_not be_instance_of${2:(${3:klass})}
endsnippet

snippet shnbc "should_not be_close" !b
${1:subject}.should_not be_close(${2:result}, ${3:tolerance})
endsnippet

snippet shnin "should not_include" !b
${1:subject}.should_not include(${2:object}${3:, ${4:object2}})
endsnippet

snippet shnbr "should_not be_redirect"
response.should_not be_redirect
endsnippet

snippet shne "should_not equal" !b
${1:subject}.should_not equal${2:(${3:value})}
endsnippet

snippet shnm "should_not match" !b
${1:subject}.should_not match${2:(/${3:regexp}/)}
endsnippet

snippet shnp "should_not be_{predicate}" !b
${1:subject}.should_not ${2:be_${3:predicate}}
endsnippet

snippet shnre "should_not raise" !b
expect { $1 }.not_to raise_error${2:(${3:error})}
endsnippet

snippet shnr "should_not_receive" !b
${1:mock}.should_not_receive${2:(:${3:message})}
endsnippet

snippet shnrt "should_not respond_to" !b
${1:subject}.should_not respond_to${2:(:${3:sym})}
endsnippet

snippet shns "should_not satisfy" !b
${1:subject}.should_not satisfy { |obj| $2 }
endsnippet

snippet shnt "should_not throw" !b
expect { $1 }.should_not throw_symbol${2:(:${3:symbol})}
endsnippet

snippet shp "should be_{predicate}" !b
${1:subject}.should ${2:be_${3:predicate}}
endsnippet

snippet shre "should raise" !b
expect { $1 }.to raise_error${2:(${3:error})}
endsnippet

snippet shr "should_receive" !b
${1:mock}.should_receive${2:(:${3:message})}
endsnippet

snippet wia "with(args)"
with(${1})
endsnippet

snippet shrt "should redirect_to"
response.should redirect_to${1:(${2:url})}
endsnippet

snippet shrt "should render_template"
response.should render_template${1:(:${2:template})}
endsnippet

snippet shrt "should respond_to" !b
${1:subject}.should respond_to${2:(:${3:sym})}
endsnippet

snippet shs "should satisfy" !b
${1:subject}.should satisfy { |obj| $2 }
endsnippet

snippet sht "should throw" !b
expect { $1 }.should throw_symbol${2:(:${3:symbol})}
endsnippet

snippet stu "stub" w
stub(:${1:message})
endsnippet

snippet stu "stub" !b
${1:double}.stub(:${2:message})
endsnippet

snippet aft "teardown after block" b
after(${1::each}) do
  $0
end
endsnippet

snippet tw "twice" w
twice
endsnippet

snippet let "let" b
let(:${1:symbol}) { $2 }
endsnippet

snippet letb "let block" b
let :${1:symbol} do
  $2
end
endsnippet

snippet subj "subject" b
subject { $1 }
endsnippet

snippet exp "expect to" b
expect do
  $1
end.to ${2:change {${3:subject}}.${4:from($5).to($6)}}
endsnippet

snippet sef "shared_examples_for" b
shared_examples_for '${1:group description}' do
  $2
end
endsnippet

snippet shbl "it_behaves_like" b
it_behaves_like '${1:shared example group}'
endsnippet

#
# Capybara magic predicate matchers
#
# These now wait for Ajax so that `should_not have_xpath` is equivalent to
# `should have_no_xpath`, etc.
#
# Unfortunately also have placeholder issues currently
snippet shhs "should have_selector" !b
${1:subject}.should have_selector(${2::xpath, }${3:selector})
endsnippet

snippet shnhs "should_not have_selector" !b
${1:subject}.should_not have_selector(${2::xpath, }${3:selector})
endsnippet

snippet shhxp "should have_xpath" !b
${1:subject}.should have_xpath${2:(${3:selector})}
endsnippet

snippet shnhxp "should_not have_xpath" !b
${1:subject}.should_not have_xpath${2:(${3:selector})}
endsnippet

snippet shhcss "should have_css" !b
${1:subject}.should have_css${2:(${3:selector})}
endsnippet

snippet shnhcss "should_not have_css" !b
${1:subject}.should_not have_css${2:(${3:selector})}
endsnippet

snippet shhc "should have_content" !b
${1:subject}.should have_content${2:('$3')}
endsnippet

snippet shnhc "should_not have_content" !b
${1:subject}.should_not have_content${2:('$3')}
endsnippet

