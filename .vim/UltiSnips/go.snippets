# Override from vim-go just to add the word boundary option -- you often want
# e.g. make(chan int) to work inside make()
snippet ch "chan Type" w
chan ${0:string}
endsnippet

# Override snippet from vim-go that already overrides the better one from
# vim-snippets/UltiSnips (automatically removes space for an infinite loop construct)
snippet for "for ... { ... }"
for ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet if: "if binding := expr; test { ... }" b
if ${1:binding} := ${2:expression}; ${3:$1} {
	${0:${VISUAL}}
}
endsnippet

snippet ifer: "if err := expr; err != nil { ... }" b
if ${1:err} := ${2:expression}; $1 != nil {
	${0:${VISUAL}}
}
endsnippet

snippet ifok "if binding, ok := expr; ok { ... }" b
if ${1:binding}, ok := ${2:expresssion}; ok {
	${0:${VISUAL}}
}
endsnippet

snippet ifert "if error of type (type assertion)" b
if ${1:newerr}, ok := ${2:err}.(${3:ErrType}); ok {
	${0:${VISUAL}}
}
endsnippet

snippet timeout "time.After(timeout)" i
time.After(time.${1:Second} * ${2:1})
endsnippet

# type switch
snippet tswitch "switch t := t.(type) { ... }"
switch ${1:t} := ${2:$1}.(type) {
case ${3:bool}:
	${0}
}
endsnippet
