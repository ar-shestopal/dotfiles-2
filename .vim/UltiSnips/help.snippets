# Overrides of defaults from vim-snippets: I like to format my sub-sections a
# little differently.

global !p
def tag_namespace(snip):
	return snip.fn.split('.')[0]

def tag_section(txt):
	return txt.strip("1234567890. ").lower().replace(' ', '-')

def tag(txt, snip):
	return "*%s-%s*" % (tag_namespace(snip), tag_section(txt))

def inline_tag(snip, t):
	return tag(t[1], snip).rjust(78-len(t[1]))

def leading_tag(snip, t):
	return tag(t[1], snip).rjust(78)

def command_tag(snip, t):
	tag = "*:%s*" % t[1].replace(' ', '-')
	return tag.rjust(78)

def function_tag(snip, t):
	tag = "*%s()*" % t[1]
	return tag.rjust(78)
endglobal

snippet ssec "Sub section marker" b
------------------------------------------------------------------------------
${1:Subsection}`!p snip.rv = inline_tag(snip, t)`

$0
endsnippet

snippet sssec "Subsub Section marker" b
`!p snip.rv = leading_tag(snip, t)`
${1:SubSubsection}~

$0
endsnippet

# Inspired by vim-go's formatting style, less fussy and cramped than trying to
# emulate the more columnar style of Vim's built-in command docs.
snippet comm "Command Description" b
`!p snip.rv = command_tag(snip, t)`
:${1:CommandSpec} ${2:[{arg}]}

	${3:Description}

$0
endsnippet

snippet func "Function Description" b
`!p snip.rv = function_tag(snip, t)`
${1:function#Name}(${2:[{arg}]})

	${3:Description}

$0
endsnippet
