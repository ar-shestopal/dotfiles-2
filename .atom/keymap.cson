# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'body':
  # Make Ctrl-[ an Escape alternative, like Vim
  # TODO: figure out if this breaks dismissing notifications? See:
  # https://github.com/atom/notifications/pull/47
  'ctrl-[': 'core:cancel'

  # The Tree View supports these by default, make them work elsewhere too.
  # This applies to splitting current editor or can be used in the Find File
  # fuzzy finder menu.
  'cmd-k h': 'pane:split-left'
  'cmd-k j': 'pane:split-down'
  'cmd-k k': 'pane:split-up'
  'cmd-k l': 'pane:split-right'

  # Vim mode provides these, but mapping them here makes them work in some other
  # places like Advanced Open File's UI.
  'ctrl-w s': 'pane:split-down'
  'ctrl-w v': 'pane:split-right'

  # Make these escape from some non-editor windows like Markdown preview
  # TODO: just move all of ctrl-h, etc. here too?
  'ctrl-w w': 'window:focus-next-pane'
  'ctrl-w ctrl-w': 'window:focus-next-pane'
  'ctrl-w ;': 'window:focus-previous-pane'

 # Main fuzzy finder; sadly not working in symbols-view?
 '.select-list':
   'ctrl-g': 'core:cancel'
   'ctrl-v': 'pane:split-right'
   'ctrl-s': 'pane:split-down'
 '.advanced-open-file atom-text-editor':
   'ctrl-v': 'pane:split-right'
   'ctrl-s': 'pane:split-down'

#-------------------------------------------------------------------------------
# Vim Normal + Visual Modes
#-------------------------------------------------------------------------------
'atom-text-editor.vim-mode-plus:not(.insert-mode)':
  'enter': 'ex-mode:open'

  # Use last-cursor-position package like Vim's jump stack
  'ctrl-o': 'last-cursor-position:previous'
  'ctrl-i': 'last-cursor-position:next'

  # Split navigation shortcuts
  'ctrl-h': 'window:focus-pane-on-left'
  'ctrl-l': 'window:focus-pane-on-right'
  'ctrl-j': 'window:focus-pane-below'
  'ctrl-k': 'window:focus-pane-above'

  # TODO: contrib to vim-mode
  'ctrl-w ;': 'window:focus-previous-pane'

  # Switch mark movements as I do in Vim -- exact column easier to reach
  '\'': 'vim-mode-plus:move-to-mark'
  '`': 'vim-mode-plus:move-to-mark-line'

#-------------------------------------------------------------------------------
# Vim Normal Mode defaults
#-------------------------------------------------------------------------------
'atom-text-editor.vim-mode-plus.normal-mode':
  # TODO: Why aren't ctrl-e / ctrl-y scrolling working sometimes?
  # TODO: [-space empty line insertion
  # TODO: make ctrl-d / ctrl-t change indentation in insert mode

  # Vim-style tag navigation - symbols-view has this but atom-ctags does not;
  # TODO: contribute it upstream?
  'ctrl-]': 'atom-ctags:go-to-declaration'
  'ctrl-t': 'atom-ctags:return-from-declaration'

  # Shortcuts from unimpaired.vim
  # This is a custom command from my init.coffee
  'c o l': 'settings:toggle-show-invisibles'
  'c o c': 'highlight-line:toggle-background'
  'c o n': 'editor:toggle-line-numbers'
  'c o w': 'editor:toggle-soft-wrap'

  # Some of my most essential Leader mappings (Space as Leader)
  'space [': 'tree-view:toggle'
  'space ]': 'symbols-tree-view:toggle'
  'space enter': 'command-palette:toggle'
  'space o': 'fuzzy-finder:toggle-file-finder'
  'space ctrl-o': 'fuzzy-finder:toggle-buffer-finder'
  'space b': 'fuzzy-finder:toggle-buffer-finder'
  # TODO: Might want to use built-in symbols support when language has poor ctags?
  # 'cmd-r': 'symbols-view:toggle-file-symbols'
  'space f': 'atom-ctags:toggle-file-symbols'
  'space g m': 'git-plus:menu'
  'space k': 'dash:shortcut'
  'space w': 'core:save'
  'space ctrl-f': 'atom-ctags:toggle-project-symbols'
  'space f2': 'linter:previous-error'
  'space f4': 'linter:next-error'
  # TODO: quickfix-like navigation mappings for the build plugin go-to-error
  # f2/f4 like I use in Vim conflicts with native Atom bookmarks
  # 'f4': 'build:error-match'
  # 'shift-f4': 'build:error-match-first'

  # TODO: test vs. build (:Dispatch vs. :Make)
  'space f3': 'build:trigger'
  'f3': 'build:trigger'

#-------------------------------------------------------------------------------
# Filetype-specific Overrides
#-------------------------------------------------------------------------------
'atom-text-editor[data-grammar~=haskell].vim-mode-plus.normal-mode':
  # haskell-hoogle:lookup; make it support current word if no range highlight
  'space f': 'ide-haskell-hasktags:show-file-tags'
  'space ctrl-f': 'ide-haskell-hasktags:show-tags'

  # TODO: ghc-mod should be able to do better, but not supported by Atom plugin?
  # BUG: Doesn't work on first character of word; used to happen with Dash plugin,
  #      might be the same bug.
  'g d': 'ide-haskell-hasktags:go-to-declaration'
  'ctrl-]': 'ide-haskell-hasktags:go-to-declaration'
  'ctrl-t': 'last-cursor-position:previous'

  # TODO: how do I fix \ "LocalLeader" mappings? Or maybe ghc-mod is broken
  '\ t': 'haskell-ghc-mod:show-type'
  '\ i': 'haskell-ghc-mod:show-info'
  '\ T': 'haskell-ghc-mod:insert-type'

'atom-text-editor[data-grammar~=python].vim-mode-plus.normal-mode':
  'g d': 'autocomplete-python:go-to-definition'
  'ctrl-]': 'autocomplete-python:go-to-definition'
  'ctrl-t': 'last-cursor-position:previous'

'atom-text-editor[data-grammar~=rust].vim-mode-plus.normal-mode':
  'g d': 'racer:find-definition'
  'ctrl-]': 'racer:find-definition'
  'ctrl-t': 'last-cursor-position:previous'

# TypeScript
'atom-text-editor[data-grammar^="source ts"].vim-mode-plus.normal-mode':
  # atom-typescript has symbols integration
  'space f': 'symbols-view:toggle-file-symbols'
  'space ctrl-f': 'symbols-view:toggle-project-symbols'
  'space ]': 'typescript:toggle-semantic-view'

  'g d': 'typescript:go-to-declaration'
  'ctrl-]': 'typescript:go-to-declaration'
  'ctrl-t': 'last-cursor-position:previous'

  '\\ t': 'typescript:show-type'

'.tree-view':
  # The foil to the Vim normal mode mapping above
  'space [': 'tree-view:toggle'

# 'atom-workspace':
#   '': 'ide-haskell:toggle-output'
